---
import voices from "../data/elevenLabsVoicesDict.json";

const voiceArray = Object.keys(voices);
---

<html>
  <body>
    <main>
      <header>
        <h1>GPTalk</h1>
      </header>
      <div class="prompt-container">
        <label for="prompt-input">Prompt:</label>
        <textarea class="prompt-input" name="prompt-input"></textarea>
      </div>
      <button class="start-button">START</button>
      <button class="pause-button">||</button>
      <button class="pause-button hide">||</button>
      <div class="bot-container">
        <div class="bot bot-one">
          <img class="bot-image bot-image-one" src="/cat.png" />
          <span>
            <label for="voice-selector">Pick a Voice:</label>
            <select
              name="voice-selector"
              class="voice-selector voice-one"
              required="true"
            >
              {
                voiceArray.map((voice) => (
                  <option value={voices[voice]}>{voice}</option>
                ))
              }
            </select>
          </span>
          <p class="bot-output output-one"></p>
        </div>
        <div class="bot bot-two">
          <img class="bot-image bot-image-two" src="/chicken.png" />
          <span class="voice-selector-container">
            <label for="voice-selector">Pick a Voice:</label>
            <select
              name="voice-selector"
              class="voice-selector voice-two"
              required="true"
            >
              {
                voiceArray.map((voice) => (
                  <option value={voices[voice]}>{voice}</option>
                ))
              }
            </select>
          </span>
          <div class="bot-output output-two"></div>
        </div>
      </div>
    </main>
  </body>
  <script>
    const audioContext = new AudioContext();
    let playableAudio;
    const startButton = document.querySelector(".start-button");
    const pauseButton = document.querySelector(".pause-button");
    const initialPrompt = document.querySelector(
      ".prompt-input"
    ) as HTMLInputElement;
    const botOneOutput = document.querySelector(".output-one");
    const botTwoOutput = document.querySelector(".output-two");
    const conversationContext: object[] = [];
    const voiceOne = document.querySelector(".voice-one") as HTMLInputElement;
    const voiceTwo = document.querySelector(".voice-two") as HTMLInputElement;
    let useVoiceOne = true;
    let paused = true;
    let playing = false;

    const botOneImage = document.querySelector(".bot-image-one");
    const botTwoImage = document.querySelector(".bot-image-two");

    function startNewConversation() {
      playing = true;
      paused = false;
      const textConfig = {
        method: `POST`,
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: JSON.stringify({ data: initialPrompt.value }),
      };
      try {
        fetch("http://localhost:3000", textConfig)
          .then(async (res) => res.json())
          .then(async (textData) => {
            const audioConfig = {
              method: `POST`,
              headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
              },
              body: JSON.stringify({ data: textData, voice: voiceOne.value }),
            };
            botOneOutput!.innerHTML = textData;
            conversationContext.push({
              role: "user",
              content: textData,
              name: "bot-one",
            });
            return fetch("http://localhost:3000/audio", audioConfig);
          })
          .then(async (res) => await res.arrayBuffer())
          .then(async (audio) => {
            playableAudio = await audioContext.decodeAudioData(audio);
            playAudio();
          });
      } catch (err) {
        console.log("Start new conversation error: \n", err);
      }
    }

    function playAudio() {
      animateBot();
      const playSound = audioContext.createBufferSource();
      playSound.addEventListener("ended", () => {
        unAnimate();
        playing = false;
        continueConversation();
      });
      playSound.buffer = playableAudio;
      playSound.connect(audioContext.destination);
      playSound.start(audioContext.currentTime);
      useVoiceOne = !useVoiceOne;
    }

    function animateBot() {
      if (useVoiceOne) {
        botOneImage!.classList.add("dance");
      } else {
        botTwoImage!.classList.add("dance");
      }
    }

    function unAnimate() {
      const dancingImage = document.querySelector(".dance");
      dancingImage?.classList.remove("dance");
    }

    function continueConversation() {
      if (paused == false) {
        playing = true;
        const textConfig = {
          method: `POST`,
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: JSON.stringify({ data: conversationContext }),
        };
        try {
          fetch("http://localhost:3000/continue", textConfig)
            .then(async (res) => res.json())
            .then(async (textData) => {
              const currentVoice = useVoiceOne
                ? voiceOne.value
                : voiceTwo.value;
              const currentBot = useVoiceOne ? "bot-one" : "bot-two";
              const audioConfig = {
                method: `POST`,
                headers: {
                  "Content-Type": "application/json",
                  Accept: "application/json",
                },
                body: JSON.stringify({
                  data: textData,
                  voice: currentVoice,
                }),
              };
              if (useVoiceOne) {
                botOneOutput!.innerHTML = textData;
              } else {
                botTwoOutput!.innerHTML = textData;
              }
              conversationContext.push({
                role: "user",
                content: textData,
                name: currentBot,
              });

              return fetch("http://localhost:3000/audio", audioConfig);
            })
            .then(async (res) => await res.arrayBuffer())
            .then(async (audio) => {
              playableAudio = await audioContext.decodeAudioData(audio);
              playAudio();
            });
        } catch (err) {
          playing = false;
          console.log("Continued conversation error: \n", err);
        }
      }
    }

    startButton!.addEventListener("click", () => {
      startButton?.classList.add("hide");
      pauseButton?.classList.remove("hide");
      startNewConversation();
    });

    pauseButton!.addEventListener("click", () => {
      if (paused == true) {
        paused = false;
        pauseButton!.innerHTML = "||";
        if (!playing) continueConversation();
      } else {
        paused = true;
        pauseButton!.innerHTML = ">";
      }
    });
  </script>

  <style>
    * {
      box-sizing: border-box;
      margin: 0;
    }

    main {
      display: flex;
      flex-flow: column nowrap;
      justify-content: center;
      align-items: center;
    }
    header {
      display: flex;
      align-items: center;
      gap: 4em;
    }

    h1 {
      position: relative;
    }

    .bot {
      display: flex;
      flex-flow: column nowrap;
      justify-content: center;
    }

    .voice-selector {
      width: 50%;
      align-self: center;
    }

    .bot-image {
      height: 250px;
    }

    .bot-container {
      display: grid;
      grid-template: 1fr / 1fr 1fr;
      align-items: start;
    }

    .start-button {
      background-color: green;
      height: 60px;
      width: 120px;
      border-radius: 1em;
      border: 2px solid black;
      box-shadow: 1px 2px 4px black;
      /* box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.73); */
      cursor: pointer;
    }

    .pause-button {
      width: 120px;
      height: 120px;
      font-size: 3em;
      border-radius: 50%;
      text-align: center;
      display: flex;
      justify-content: center;
      align-items: center;
      border: 1px solid black;
      box-shadow: 1px 2px 4px black;
    }

    .voice-selector-container {
      display: flex;
      flex-flow: row nowrap;
      justify-content: center;
      align-items: center;
    }

    .bot-output {
      border: 1px solid black;
      height: 150px;
      width: 85%;
    }

    .dance {
      animation: bounce 0.2s;
      animation-direction: alternate;
      animation-iteration-count: infinite;
    }

    @keyframes bounce {
      from {
        transform: rotate(0deg) translate3d(0, 0, 0);
      }
      to {
        transform: rotate(-10deg) translate3d(5px, 20px, 0);
      }
    }

    .hide {
      visibility: hidden;
    }
  </style>
</html>
