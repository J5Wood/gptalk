---

---

<html>
  <body>
    <main>
      <header>
        <h1>GPTalk</h1>
        <div class="prompt-container">
          <label for="prompt-input">Prompt:</label>
          <textarea class="prompt-input" name="prompt-input"></textarea>
        </div>
      </header>
      <button class="start-button">START</button>
      <div class="bot-container">
        <div class="bot bot-one">
          <img class="bot-image" src="/cat.png" />
          <p class="bot-output output-one"></p>
        </div>
        <div class="bot bot-two">
          <img class="bot-image" src="/chicken.png" />
          <div class="bot-output output-two"></div>
        </div>
      </div>
    </main>
  </body>
  <script>
    const context = new AudioContext();
    let playableAudio;
    const startButton = document.querySelector(".start-button");
    const initialPrompt = document.querySelector(
      ".prompt-input"
    ) as HTMLInputElement;
    const botOneOutput = document.querySelector(".output-one");

    if (startButton) {
      startButton.addEventListener("click", () => {
        const textConfig = {
          method: `POST`,
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: JSON.stringify({ data: initialPrompt.value }),
        };
        try {
          fetch("http://localhost:3000", textConfig)
            .then(async (res) => res.json())
            .then(async (textData) => {
              const audioConfig = {
                method: `POST`,
                headers: {
                  "Content-Type": "application/json",
                  Accept: "application/json",
                },
                body: JSON.stringify({ data: textData }),
              };
              botOneOutput!.innerHTML = textData;
              return fetch("http://localhost:3000/audio", audioConfig);
            })
            .then(async (res) => await res.arrayBuffer())
            .then(async (audio) => {
              playableAudio = await context.decodeAudioData(audio);
              playAudio();
            });
        } catch (err) {
          console.log("Start conversation error: \n", err);
        }
      });
    }

    function playAudio() {
      const playSound = context.createBufferSource();
      playSound.buffer = playableAudio;
      playSound.connect(context.destination);
      playSound.start(context.currentTime);
    }
  </script>

  <style>
    main {
      display: flex;
      flex-flow: column nowrap;
      justify-content: center;
      align-items: center;
    }
    header {
      display: flex;
      align-items: center;
      gap: 4em;
    }
    h1 {
      position: relative;
    }

    .bot {
      display: flex;
      flex-flow: column nowrap;
      justify-content: center;
    }

    .bot-image {
      height: 50%;
    }

    .bot-container {
      display: grid;
      grid-template: 1fr / 1fr 1fr;
    }

    .start-button {
      background-color: green;
      height: 60px;
      width: 120px;
      border-radius: 1em;
      border: 2px solid black;
      box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.73);
      cursor: pointer;
    }

    .bot-output {
      border: 1px solid black;
      height: 150px;
      width: 85%;
    }
  </style>
</html>
